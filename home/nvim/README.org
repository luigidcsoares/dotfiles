#+title: Neovim configuration
#+author: Luigi D. C. Soares

Let's start by installing Neovim, along with all plugins:

#+begin_src nix :tangle default.nix
{ pkgs, ... }: {
  programs.neovim = {
    enable = true;
    defaultEditor = true;
    extraLuaConfig = builtins.readFile ./init.lua;
    plugins = [
      pkgs.vimPlugins.catppuccin-nvim
      pkgs.vimPlugins.nvim-web-devicons
      pkgs.vimPlugins.lualine-nvim

      pkgs.vimPlugins.direnv-vim
      pkgs.vimPlugins.telescope-nvim
      pkgs.vimPlugins.telescope-file-browser-nvim
      pkgs.vimPlugins.telescope-fzf-native-nvim
      pkgs.vimPlugins.toggleterm-nvim

      pkgs.vimPlugins.nvim-lspconfig
      pkgs.vimPlugins.nvim-treesitter.withAllGrammars

      pkgs.vimPlugins.orgmode
      pkgs.vimPlugins.vimtex
      
      (pkgs.vimUtils.buildVimPlugin {
        name = "wezterm";
        src = pkgs.fetchFromGitHub {
          owner = "willothy";
          repo = "wezterm.nvim";
          rev = "v0.4.0";
          hash = "sha256-HBwmBlvlw1bZNSSOVpy7iuPpGSMpHRra3Ych2PH+aWY=";
        };
      })
    ];

    extraLuaPackages = luaPkgs: [ ];
    extraPython3Packages = pythonPkgs: [ ];
  };
}
#+end_src

* General options

  Here we set up some general options, such as map leader, default
  indentation, clipboard to interact wsl, etc:

  #+begin_src lua :tangle init.lua
  -- Enable project local configuration
  vim.opt.exrc = true

  -- Default indentation options
  vim.opt.expandtab = true
  vim.opt.tabstop = 2
  vim.opt.softtabstop = 2
  vim.opt.shiftwidth = 2

  -- Map both leader and localleader to space
  vim.g.mapleader = " "
  vim.g.maplocalleader = " "

  -- Sets up clipboard
  vim.opt.clipboard = "unnamedplus"
  vim.g.clipboard = {
    name = "WSLClipboard",
    copy = {
      ["+"] = "clip.exe",
      ["*"] = "clip.exe"
    },
    paste = {
      ["+"] = 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace("`r", ""))',
      ["*"] = 'powershell.exe -c [Console]::Out.Write($(Get-Clipboard -Raw).tostring().replace("`r", ""))',
    },
    cache_enabled = 0
  }

  -- Show replace result in split window
  vim.opt.inccommand = "split"
  #+end_src

* User interface
 
 Here we set up some default UI config, a colorscheme and lualine:
 
 #+begin_src lua :tangle init.lua
 -- Default UI options
 vim.opt.number = true
 vim.opt.splitbelow = true
 vim.opt.splitright = true
 vim.opt.textwidth = 72
 vim.opt.termguicolors = true
 vim.opt.concealcursor = ""
 vim.opt.conceallevel = 2
 vim.opt.foldlevel = 99
 
 require("catppuccin").setup({ flavour = "frappe" })
 
 require("lualine").setup({ options = { theme = "catppuccin" } })
 #+end_src
 
* Tools

  Install [[https://github.com/nvim-telescope/telescope.nvim][Telescope]] and extensions:
 
  #+begin_src lua :tangle init.lua
  local telescope = require("telescope")
  local telescope_builtin = require("telescope.builtin")

  telescope.setup({
   extensions = {
     file_browser = {
       hijack_netrw = true,
       hidden = true
     }
   }
  })

  -- Telescope mappings
  vim.keymap.set("n", "<Leader>ff", telescope_builtin.find_files, {})
  vim.keymap.set("n", "<leader>lg", telescope_builtin.live_grep, {})
  vim.keymap.set("n", "<Leader>bf", telescope_builtin.buffers, {})
  vim.keymap.set("n", "<Leader>ht", telescope_builtin.help_tags, {})

  -- Telescope extensions
  telescope.load_extension('fzf')
  telescope.load_extension("file_browser")
  vim.keymap.set(
   "n",
   "<Leader>fb", -- As in emacs "dired"
   ":Telescope file_browser path=%:p:h select_buffer=true<CR>",
   {}
  )
  #+end_src

  Configure treesitter's highlight, indent and selection:

  #+begin_src lua :tangle init.lua
  require("nvim-treesitter.configs").setup({
   highlight = {
     enable = true,
     disable = { "latex" }
   },
   indent = { enable = true },
   incremental_selection = {
     enable = true,
     keymaps = {
       node_incremental = "v",
       node_decremental = "z",
       scope_incremental = "<Tab>",
     }
   }
  })
  #+end_src

  Set up LSP servers:

  #+begin_src lua :tangle init.lua
  local lspconfig = require("lspconfig")

  lspconfig.lua_ls.setup({})
  lspconfig.nixd.setup({})
  lspconfig.pyright.setup({})

  vim.api.nvim_create_autocmd("LspAttach", {
   group = vim.api.nvim_create_augroup("UserLspConfig", {}),
   callback = function(ev)
     local opts = { buffer = ev.buf }
     vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
     vim.keymap.set("n", "<Leader>fmt", vim.lsp.buf.format, opts)
   end
  })
  #+end_src
   
  Configure toggleterm, so we can easily open and close terminals. A
  simple alternative is to use ctrl-z + fg, but with toggleterm we get
  terminals as neovim buffers, which is awesome.
 
  #+begin_src lua :tangle init.lua
  require("toggleterm").setup({
   open_mapping = "<Leader>tt",
   insert_mappings = false,
   terminal_mappings = false,
   start_in_insert = true,
   hide_numbers = true,
   direction = "float"
  })

  function _G.set_terminal_keymaps()
   local opts = { buffer = 0 }
   vim.keymap.set("t", "<ESC>", [[<C-\><C-n>]], opts)
   vim.keymap.set("t", "<C-w>", [[<C-\><C-n><C-w>]], opts)
  end

  vim.cmd("autocmd! TermOpen term://* lua set_terminal_keymaps()")
  #+end_src
 
* Languages

  Install and configure org-mode:
 
  #+begin_src lua :tangle init.lua
  require("orgmode").setup({})
  #+end_src
 
  Configure LaTeX (vimtex):

  - Fix the path to neovim (nix only)
  - Define Sioyek as the default PDF viewer

  #+begin_src lua :tangle init.lua
  vim.g.vimtex_callback_progpath = vim.fn.system("which nvim")
  vim.g.vimtex_view_method = "sioyek"
  #+end_src
